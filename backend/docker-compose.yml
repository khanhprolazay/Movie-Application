version: "2.1"

services:
  # zookeeper:
  #   container_name: zookeeper
  #   image: confluentinc/cp-zookeeper:latest
  #   networks:
  #     - backend
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - 22181:2181
  #     # volumes:
  #   #   - ./volumes/zookeeper/data:/var/lib/zookeeper/data
  #   #   - ./volumes/zookeeper/log:/var/lib/zookeeper/log

  # kafka:
  #   container_name: kafka
  #   hostname: kafka
  #   image: confluentinc/cp-kafka:latest
  #   networks:
  #     - backend
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 29092:29092
  #   # volumes:
  #   #   - ./volumes/kafka:/var/lib/kafka/data
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092, INTERNAL://:9092
  #     KAFKA_ADVERTISED_LISTENERS: EXTERNAL_SAME_HOST://localhost:29092, INTERNAL://kafka:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT, EXTERNAL_SAME_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_DELETE_TOPIC_ENABLE: true

  #   healthcheck:
  #       test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
  #       interval: 5s
  #       timeout: 10s
  #       retries: 20
  
  # kafka_ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   networks:
  #     - backend
  #   ports:
  #     - 8080:8080
  #   depends_on:
  #     - kafka
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
  rabbitmq:
    image: 'bitnami/rabbitmq:latest'
    ports: 
      - '5672:5672'
      - '15672:15672'
    networks:
      - backend
    environment:
      RABBITMQ_USERNAME: root
      RABBITMQ_PASSWORD: root

  mysql:
    container_name: mysql
    image: mysql:8.0
    networks:
      - backend
    ports:
      - 23306:3306
    volumes:
      - ./volumes/mysql:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
      MYSQL_PASSWORD: user
  
  # api-gateway:
  #   container_name: api-gateway
  #   image: api-gateway:version1
  #   networks:
  #     - backend
  #   ports:
  #     - 5000:5000
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   links:
  #     - kafka
  
  # auth-service:
  #   container_name: auth-service
  #   image: auth-service:version1
  #   networks:
  #     - backend
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   links:
  #     - kafka
  
  # user-service:
  #   container_name: user-service
  #   image: user-service:version1
  #   networks:
  #     - backend
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   links:
  #     - kafka
  
  # movie-service:
  #   container_name: movie-service
  #   image: movie-service:version1
  #   networks:
  #     - backend
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   links:
  #     - kafka
  
networks:
  backend:
    driver: bridge
    name: movie-backend
